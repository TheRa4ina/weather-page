//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "index.h"
#include <drogon/utils/OStringStream.h>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list>
#include <deque>
#include <queue>
#include<json/value.h>
using namespace drogon;
std::string index::genText(const DrTemplateData& index_view_data)
{
	drogon::OStringStream index_tmp_stream;
	std::string layoutName{""};
    auto weather=index_view_data.get<Json::Value>("weather_json");
	index_tmp_stream << "        <head>\n";
	index_tmp_stream << "            <meta charset=\"UTF-8\">\n";
	index_tmp_stream << "            <link rel=\"stylesheet\" href=\"style.css\">\n";
	index_tmp_stream << "            <title>Погода в Москве</title>\n";
	index_tmp_stream << "        </head>\n";
	index_tmp_stream << "        <body>\n";
	index_tmp_stream << "            <div class=\"weather-section\">\n";
	index_tmp_stream << "                <h1>Погода сегодня</h1>\n";
	index_tmp_stream << "                <h2>\n";
	index_tmp_stream << "                    <div class=\"weather-condition\" id=\"today\">\n";
	index_tmp_stream << "                        <img src= \"";
index_tmp_stream<<weather["current"]["condition"]["icon"].asString();
	index_tmp_stream << "\" alt=weather icon/>\n";
	index_tmp_stream << "                        <span class=\"status\">";
index_tmp_stream<<weather["current"]["condition"]["text"].asString();
	index_tmp_stream << "</span>\n";
	index_tmp_stream << "                    </div>\n";
	index_tmp_stream << "                </h2>\n";
	index_tmp_stream << "                <h3>\n";
	index_tmp_stream << "                    Температура\n";
	index_tmp_stream << "                </h3>\n";
	index_tmp_stream << "                <p>\n";
	index_tmp_stream << "                    Текущая температура: ";
index_tmp_stream<<weather["current"]["temp_c"].asFloat();
	index_tmp_stream << " C&deg;<br />\n";
	index_tmp_stream << "                    Ощущается как: ";
index_tmp_stream<<weather["current"]["feelslike_c"].asFloat();
	index_tmp_stream << " C&deg;\n";
index_tmp_stream<<"\n";
	index_tmp_stream << "                </p>\n";
	index_tmp_stream << "                <h3>\n";
	index_tmp_stream << "                    Ветер\n";
	index_tmp_stream << "                </h3>\n";
	index_tmp_stream << "                <p>\n";
	index_tmp_stream << "                    Скорость ветра = ";
index_tmp_stream<<weather["current"]["wind_kph"].asFloat();
	index_tmp_stream << " Км/ч<br />\n";
	index_tmp_stream << "                    Угол ветра = ";
index_tmp_stream<<weather["current"]["wind_degree"].asFloat();
	index_tmp_stream << "&deg;\n";
	index_tmp_stream << "                </p>\n";
	index_tmp_stream << "                <h3>\n";
	index_tmp_stream << "                    Влажность\n";
	index_tmp_stream << "                </h3>\n";
	index_tmp_stream << "                <p>\n";
	index_tmp_stream << "                    Влажность сейчас = ";
index_tmp_stream<<weather["current"]["humidity"].asInt();
	index_tmp_stream << "&#37;\n";
	index_tmp_stream << "                </p>\n";
	index_tmp_stream << "            </div>\n";
	index_tmp_stream << "            <a href=\"#tommorow\" id=\"showTomorrow\">Показать погоду завтра</a>\n";
auto tommorows=weather["forecast"]["forecastday"][1]["day"];
	index_tmp_stream << "            <div class=\"weather-section\" id=\"tommorow\">\n";
	index_tmp_stream << "                <h1>Погода завтра</h1>\n";
	index_tmp_stream << "                <h2>\n";
	index_tmp_stream << "                    <div class=\"weather-condition\">\n";
	index_tmp_stream << "                        <img src= \"";
index_tmp_stream<<tommorows["condition"]["icon"].asString();
	index_tmp_stream << "\" alt=weather icon/>\n";
	index_tmp_stream << "                        <span class=\"status\">";
index_tmp_stream<<tommorows["condition"]["text"].asString();
	index_tmp_stream << "</span>\n";
	index_tmp_stream << "                    </div>\n";
	index_tmp_stream << "                </h2>\n";
	index_tmp_stream << "                <h3>\n";
	index_tmp_stream << "                    Температура\n";
	index_tmp_stream << "                </h3>\n";
	index_tmp_stream << "                <p>\n";
	index_tmp_stream << "                    Минимальая температура: ";
index_tmp_stream<<tommorows["mintemp_c"].asFloat();
	index_tmp_stream << "C&deg;<br />\n";
	index_tmp_stream << "                    Средняя температура: ";
index_tmp_stream<<tommorows["avgtemp_c"].asFloat();
	index_tmp_stream << "C&deg;<br />\n";
	index_tmp_stream << "                    Максимальная температура: ";
index_tmp_stream<<tommorows["maxtemp_c"].asFloat();
	index_tmp_stream << "C&deg;\n";
index_tmp_stream<<"\n";
	index_tmp_stream << "                </p>\n";
	index_tmp_stream << "                <h3>\n";
	index_tmp_stream << "                    Ветер\n";
	index_tmp_stream << "                </h3>\n";
	index_tmp_stream << "                <p>\n";
	index_tmp_stream << "                    Максимальная скорость ветра: ";
index_tmp_stream<<tommorows["maxwind_kph"].asFloat();
	index_tmp_stream << " Км/ч\n";
	index_tmp_stream << "                </p>\n";
	index_tmp_stream << "                <h3>\n";
	index_tmp_stream << "                    Влажность\n";
	index_tmp_stream << "                </h3>\n";
	index_tmp_stream << "                <p>\n";
	index_tmp_stream << "                    Средняя влажность: ";
index_tmp_stream<<tommorows["avghumidity"].asInt();
	index_tmp_stream << "&#37;\n";
	index_tmp_stream << "                </p>\n";
	index_tmp_stream << "            </div>\n";
	index_tmp_stream << "        </body>\n";
	index_tmp_stream << "</html>\n";
if(layoutName.empty())
{
std::string ret{std::move(index_tmp_stream.str())};
return ret;
}else
{
auto templ = DrTemplateBase::newTemplate(layoutName);
if(!templ) return "";
HttpViewData data = index_view_data;
auto str = std::move(index_tmp_stream.str());
if(!str.empty() && str[str.length()-1] == '\n') str.resize(str.length()-1);
data[""] = std::move(str);
return templ->genText(data);
}
}
